; a generative tox configuration, see: https://testrun.org/tox/latest/config.html#generative-envlist
; most of this came from https://github.com/ionelmc/cookiecutter-pylibrary

[tox]
envlist =
    clean,
    check,
    {py27,py33,py34,py35,pypy}-notebook{,40,41,42,4x},
    migrate,
    ; report,
    ; docs

[testenv]
basepython =
    pypy: {env:TOXPYTHON:pypy}
    {py27,docs,spell}: {env:TOXPYTHON:python2.7}
    py33: {env:TOXPYTHON:python3.3}
    py34: {env:TOXPYTHON:python3.4}
    py35: {env:TOXPYTHON:python3.5}
    {js,clean,check,report,coveralls,codecov,migrate}: python3.4
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
passenv =
    *
usedevelop = false
deps =
    coverage
    mock
    nose
    notebook: notebook
    notebook40: notebook>=4.0,<4.1
    notebook41: notebook>=4.1,<4.2
    notebook42: notebook>=4.2,<4.3
    notebook4x: https://github.com/jupyter/notebook/archive/4.x.zip
    requests
commands =
    themysto install --sys-prefix
    {posargs:nosetests -v --with-coverage --cover-package=src tests}

[testenv:js]
commands =
    themysto install --sys-prefix
    {posargs:python -m themysto.jstest}

[testenv:migrate]
deps =
setenv =
    JUPYTER_CONFIG_DIR={env:TMPDIR:}themysto_tox/config
    JUPYTER_DATA_DIR={env:TMPDIR:}themysto_tox/data
commands =
    ; ensure config & data directories exist
    python -c "import os; [os.makedirs(dd) for dd in (os.environ['JUPYTER_CONFIG_DIR'], os.environ['JUPYTER_DATA_DIR']) if not os.path.exists(dd)]"
    ; install old repo version
    pip install -v https://github.com/ipython-contrib/IPython-notebook-extensions/archive/a0a454507ab3fd607e3af11ab9d79ee8362fb0d8.zip
    ; execute the retirer script, which should fully remove the old version install
    python -m themysto.retirer
    ; check to see if anything's left
    python -c "import os,sys; files=os.listdir('{env:JUPYTER_CONFIG_DIR:}'); sys.stderr.writelines(files); sys.exit(len(files))"
    python -c "import os,sys; files=os.listdir('{env:JUPYTER_DATA_DIR:}'); sys.stderr.writelines(files); sys.exit(len(files))"
    rmdir "{env:JUPYTER_DATA_DIR:}" "{env:JUPYTER_CONFIG_DIR:}"

[testenv:check]
skip_install = true
deps =
    check-manifest
    docutils
    flake8
    isort
    pygments
    readme-renderer
commands =
    python setup.py check --strict --metadata --restructuredtext
    check-manifest {toxinidir}
    flake8 src tests setup.py
    isort --verbose --check-only --diff --recursive src tests setup.py

[testenv:docs]
deps =
    -r{toxinidir}/docs/requirements.txt
commands =
    sphinx-build {posargs:-E} -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs

[testenv:spell]
skip_install = true
setenv =
    SPELLCHECK=1
deps =
    -r{toxinidir}/docs/requirements.txt
    pyenchant
    sphinxcontrib-spelling
commands =
    sphinx-build -b spelling docs dist/docs

[testenv:coveralls]
skip_install = true
deps =
    coveralls
commands =
    coverage combine
    coverage report
    coveralls []

[testenv:codecov]
skip_install = true
deps =
    codecov
commands =
    coverage combine
    coverage report
    coverage xml --ignore-errors
    codecov []

[testenv:report]
skip_install = true
deps = coverage
commands =
    coverage combine
    coverage report
    coverage html

[testenv:clean]
skip_install = true
deps = coverage
commands = coverage erase
